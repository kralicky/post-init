// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kralicky/post-init/pkg/api (interfaces: InstructionClient)

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/kralicky/post-init/pkg/api"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockInstructionClient is a mock of InstructionClient interface.
type MockInstructionClient struct {
	ctrl     *gomock.Controller
	recorder *MockInstructionClientMockRecorder
}

// MockInstructionClientMockRecorder is the mock recorder for MockInstructionClient.
type MockInstructionClientMockRecorder struct {
	mock *MockInstructionClient
}

// NewMockInstructionClient creates a new mock instance.
func NewMockInstructionClient(ctrl *gomock.Controller) *MockInstructionClient {
	mock := &MockInstructionClient{ctrl: ctrl}
	mock.recorder = &MockInstructionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstructionClient) EXPECT() *MockInstructionClientMockRecorder {
	return m.recorder
}

// Command mocks base method.
func (m *MockInstructionClient) Command(arg0 context.Context, arg1 *api.CommandRequest, arg2 ...grpc.CallOption) (*api.CommandResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Command", varargs...)
	ret0, _ := ret[0].(*api.CommandResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Command indicates an expected call of Command.
func (mr *MockInstructionClientMockRecorder) Command(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Command", reflect.TypeOf((*MockInstructionClient)(nil).Command), varargs...)
}

// Dismiss mocks base method.
func (m *MockInstructionClient) Dismiss(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Dismiss", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dismiss indicates an expected call of Dismiss.
func (mr *MockInstructionClientMockRecorder) Dismiss(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dismiss", reflect.TypeOf((*MockInstructionClient)(nil).Dismiss), varargs...)
}

// Script mocks base method.
func (m *MockInstructionClient) Script(arg0 context.Context, arg1 *api.ScriptRequest, arg2 ...grpc.CallOption) (*api.ScriptResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Script", varargs...)
	ret0, _ := ret[0].(*api.ScriptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Script indicates an expected call of Script.
func (mr *MockInstructionClientMockRecorder) Script(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Script", reflect.TypeOf((*MockInstructionClient)(nil).Script), varargs...)
}
