// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/api/agent_api_grpc.pb.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/kralicky/post-init/pkg/api"
	grpc "google.golang.org/grpc"
)

// MockAgentAPIClient is a mock of AgentAPIClient interface.
type MockAgentAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockAgentAPIClientMockRecorder
}

// MockAgentAPIClientMockRecorder is the mock recorder for MockAgentAPIClient.
type MockAgentAPIClientMockRecorder struct {
	mock *MockAgentAPIClient
}

// NewMockAgentAPIClient creates a new mock instance.
func NewMockAgentAPIClient(ctrl *gomock.Controller) *MockAgentAPIClient {
	mock := &MockAgentAPIClient{ctrl: ctrl}
	mock.recorder = &MockAgentAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentAPIClient) EXPECT() *MockAgentAPIClientMockRecorder {
	return m.recorder
}

// Announce mocks base method.
func (m *MockAgentAPIClient) Announce(ctx context.Context, in *api.Announcement, opts ...grpc.CallOption) (*api.AnnouncementResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Announce", varargs...)
	ret0, _ := ret[0].(*api.AnnouncementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Announce indicates an expected call of Announce.
func (mr *MockAgentAPIClientMockRecorder) Announce(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Announce", reflect.TypeOf((*MockAgentAPIClient)(nil).Announce), varargs...)
}

// MockAgentAPIServer is a mock of AgentAPIServer interface.
type MockAgentAPIServer struct {
	ctrl     *gomock.Controller
	recorder *MockAgentAPIServerMockRecorder
}

// MockAgentAPIServerMockRecorder is the mock recorder for MockAgentAPIServer.
type MockAgentAPIServerMockRecorder struct {
	mock *MockAgentAPIServer
}

// NewMockAgentAPIServer creates a new mock instance.
func NewMockAgentAPIServer(ctrl *gomock.Controller) *MockAgentAPIServer {
	mock := &MockAgentAPIServer{ctrl: ctrl}
	mock.recorder = &MockAgentAPIServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentAPIServer) EXPECT() *MockAgentAPIServerMockRecorder {
	return m.recorder
}

// Announce mocks base method.
func (m *MockAgentAPIServer) Announce(arg0 context.Context, arg1 *api.Announcement) (*api.AnnouncementResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Announce", arg0, arg1)
	ret0, _ := ret[0].(*api.AnnouncementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Announce indicates an expected call of Announce.
func (mr *MockAgentAPIServerMockRecorder) Announce(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Announce", reflect.TypeOf((*MockAgentAPIServer)(nil).Announce), arg0, arg1)
}

// mustEmbedUnimplementedAgentAPIServer mocks base method.
func (m *MockAgentAPIServer) mustEmbedUnimplementedAgentAPIServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAgentAPIServer")
}

// mustEmbedUnimplementedAgentAPIServer indicates an expected call of mustEmbedUnimplementedAgentAPIServer.
func (mr *MockAgentAPIServerMockRecorder) mustEmbedUnimplementedAgentAPIServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAgentAPIServer", reflect.TypeOf((*MockAgentAPIServer)(nil).mustEmbedUnimplementedAgentAPIServer))
}

// MockUnsafeAgentAPIServer is a mock of UnsafeAgentAPIServer interface.
type MockUnsafeAgentAPIServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAgentAPIServerMockRecorder
}

// MockUnsafeAgentAPIServerMockRecorder is the mock recorder for MockUnsafeAgentAPIServer.
type MockUnsafeAgentAPIServerMockRecorder struct {
	mock *MockUnsafeAgentAPIServer
}

// NewMockUnsafeAgentAPIServer creates a new mock instance.
func NewMockUnsafeAgentAPIServer(ctrl *gomock.Controller) *MockUnsafeAgentAPIServer {
	mock := &MockUnsafeAgentAPIServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAgentAPIServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAgentAPIServer) EXPECT() *MockUnsafeAgentAPIServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAgentAPIServer mocks base method.
func (m *MockUnsafeAgentAPIServer) mustEmbedUnimplementedAgentAPIServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAgentAPIServer")
}

// mustEmbedUnimplementedAgentAPIServer indicates an expected call of mustEmbedUnimplementedAgentAPIServer.
func (mr *MockUnsafeAgentAPIServerMockRecorder) mustEmbedUnimplementedAgentAPIServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAgentAPIServer", reflect.TypeOf((*MockUnsafeAgentAPIServer)(nil).mustEmbedUnimplementedAgentAPIServer))
}

// MockInstructionClient is a mock of InstructionClient interface.
type MockInstructionClient struct {
	ctrl     *gomock.Controller
	recorder *MockInstructionClientMockRecorder
}

// MockInstructionClientMockRecorder is the mock recorder for MockInstructionClient.
type MockInstructionClientMockRecorder struct {
	mock *MockInstructionClient
}

// NewMockInstructionClient creates a new mock instance.
func NewMockInstructionClient(ctrl *gomock.Controller) *MockInstructionClient {
	mock := &MockInstructionClient{ctrl: ctrl}
	mock.recorder = &MockInstructionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstructionClient) EXPECT() *MockInstructionClientMockRecorder {
	return m.recorder
}

// Command mocks base method.
func (m *MockInstructionClient) Command(ctx context.Context, in *api.CommandRequest, opts ...grpc.CallOption) (*api.CommandResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Command", varargs...)
	ret0, _ := ret[0].(*api.CommandResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Command indicates an expected call of Command.
func (mr *MockInstructionClientMockRecorder) Command(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Command", reflect.TypeOf((*MockInstructionClient)(nil).Command), varargs...)
}

// Script mocks base method.
func (m *MockInstructionClient) Script(ctx context.Context, in *api.ScriptRequest, opts ...grpc.CallOption) (*api.ScriptResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Script", varargs...)
	ret0, _ := ret[0].(*api.ScriptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Script indicates an expected call of Script.
func (mr *MockInstructionClientMockRecorder) Script(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Script", reflect.TypeOf((*MockInstructionClient)(nil).Script), varargs...)
}

// MockInstructionServer is a mock of InstructionServer interface.
type MockInstructionServer struct {
	ctrl     *gomock.Controller
	recorder *MockInstructionServerMockRecorder
}

// MockInstructionServerMockRecorder is the mock recorder for MockInstructionServer.
type MockInstructionServerMockRecorder struct {
	mock *MockInstructionServer
}

// NewMockInstructionServer creates a new mock instance.
func NewMockInstructionServer(ctrl *gomock.Controller) *MockInstructionServer {
	mock := &MockInstructionServer{ctrl: ctrl}
	mock.recorder = &MockInstructionServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstructionServer) EXPECT() *MockInstructionServerMockRecorder {
	return m.recorder
}

// Command mocks base method.
func (m *MockInstructionServer) Command(arg0 context.Context, arg1 *api.CommandRequest) (*api.CommandResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Command", arg0, arg1)
	ret0, _ := ret[0].(*api.CommandResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Command indicates an expected call of Command.
func (mr *MockInstructionServerMockRecorder) Command(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Command", reflect.TypeOf((*MockInstructionServer)(nil).Command), arg0, arg1)
}

// Script mocks base method.
func (m *MockInstructionServer) Script(arg0 context.Context, arg1 *api.ScriptRequest) (*api.ScriptResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Script", arg0, arg1)
	ret0, _ := ret[0].(*api.ScriptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Script indicates an expected call of Script.
func (mr *MockInstructionServerMockRecorder) Script(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Script", reflect.TypeOf((*MockInstructionServer)(nil).Script), arg0, arg1)
}

// mustEmbedUnimplementedInstructionServer mocks base method.
func (m *MockInstructionServer) mustEmbedUnimplementedInstructionServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedInstructionServer")
}

// mustEmbedUnimplementedInstructionServer indicates an expected call of mustEmbedUnimplementedInstructionServer.
func (mr *MockInstructionServerMockRecorder) mustEmbedUnimplementedInstructionServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedInstructionServer", reflect.TypeOf((*MockInstructionServer)(nil).mustEmbedUnimplementedInstructionServer))
}

// MockUnsafeInstructionServer is a mock of UnsafeInstructionServer interface.
type MockUnsafeInstructionServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeInstructionServerMockRecorder
}

// MockUnsafeInstructionServerMockRecorder is the mock recorder for MockUnsafeInstructionServer.
type MockUnsafeInstructionServerMockRecorder struct {
	mock *MockUnsafeInstructionServer
}

// NewMockUnsafeInstructionServer creates a new mock instance.
func NewMockUnsafeInstructionServer(ctrl *gomock.Controller) *MockUnsafeInstructionServer {
	mock := &MockUnsafeInstructionServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeInstructionServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeInstructionServer) EXPECT() *MockUnsafeInstructionServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedInstructionServer mocks base method.
func (m *MockUnsafeInstructionServer) mustEmbedUnimplementedInstructionServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedInstructionServer")
}

// mustEmbedUnimplementedInstructionServer indicates an expected call of mustEmbedUnimplementedInstructionServer.
func (mr *MockUnsafeInstructionServerMockRecorder) mustEmbedUnimplementedInstructionServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedInstructionServer", reflect.TypeOf((*MockUnsafeInstructionServer)(nil).mustEmbedUnimplementedInstructionServer))
}
