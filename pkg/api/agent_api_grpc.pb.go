// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - rag√π               v0.2.3
// source: pkg/api/agent_api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AgentAPIClient is the client API for AgentAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentAPIClient interface {
	Announce(ctx context.Context, in *Announcement, opts ...grpc.CallOption) (*AnnouncementResponse, error)
}

type agentAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentAPIClient(cc grpc.ClientConnInterface) AgentAPIClient {
	return &agentAPIClient{cc}
}

func (c *agentAPIClient) Announce(ctx context.Context, in *Announcement, opts ...grpc.CallOption) (*AnnouncementResponse, error) {
	out := new(AnnouncementResponse)
	err := c.cc.Invoke(ctx, "/api.AgentAPI/Announce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentAPIServer is the server API for AgentAPI service.
// All implementations must embed UnimplementedAgentAPIServer
// for forward compatibility
type AgentAPIServer interface {
	Announce(context.Context, *Announcement) (*AnnouncementResponse, error)
	mustEmbedUnimplementedAgentAPIServer()
}

// UnimplementedAgentAPIServer must be embedded to have forward compatible implementations.
type UnimplementedAgentAPIServer struct {
}

func (UnimplementedAgentAPIServer) Announce(context.Context, *Announcement) (*AnnouncementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Announce not implemented")
}
func (UnimplementedAgentAPIServer) mustEmbedUnimplementedAgentAPIServer() {}

// UnsafeAgentAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentAPIServer will
// result in compilation errors.
type UnsafeAgentAPIServer interface {
	mustEmbedUnimplementedAgentAPIServer()
}

func RegisterAgentAPIServer(s grpc.ServiceRegistrar, srv AgentAPIServer) {
	s.RegisterService(&AgentAPI_ServiceDesc, srv)
}

func _AgentAPI_Announce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Announcement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAPIServer).Announce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AgentAPI/Announce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAPIServer).Announce(ctx, req.(*Announcement))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentAPI_ServiceDesc is the grpc.ServiceDesc for AgentAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.AgentAPI",
	HandlerType: (*AgentAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Announce",
			Handler:    _AgentAPI_Announce_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/agent_api.proto",
}

// InstructionClient is the client API for Instruction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InstructionClient interface {
	Command(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error)
	Script(ctx context.Context, in *ScriptRequest, opts ...grpc.CallOption) (*ScriptResponse, error)
}

type instructionClient struct {
	cc grpc.ClientConnInterface
}

func NewInstructionClient(cc grpc.ClientConnInterface) InstructionClient {
	return &instructionClient{cc}
}

func (c *instructionClient) Command(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, "/api.Instruction/Command", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instructionClient) Script(ctx context.Context, in *ScriptRequest, opts ...grpc.CallOption) (*ScriptResponse, error) {
	out := new(ScriptResponse)
	err := c.cc.Invoke(ctx, "/api.Instruction/Script", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InstructionServer is the server API for Instruction service.
// All implementations must embed UnimplementedInstructionServer
// for forward compatibility
type InstructionServer interface {
	Command(context.Context, *CommandRequest) (*CommandResponse, error)
	Script(context.Context, *ScriptRequest) (*ScriptResponse, error)
	mustEmbedUnimplementedInstructionServer()
}

// UnimplementedInstructionServer must be embedded to have forward compatible implementations.
type UnimplementedInstructionServer struct {
}

func (UnimplementedInstructionServer) Command(context.Context, *CommandRequest) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Command not implemented")
}
func (UnimplementedInstructionServer) Script(context.Context, *ScriptRequest) (*ScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Script not implemented")
}
func (UnimplementedInstructionServer) mustEmbedUnimplementedInstructionServer() {}

// UnsafeInstructionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InstructionServer will
// result in compilation errors.
type UnsafeInstructionServer interface {
	mustEmbedUnimplementedInstructionServer()
}

func RegisterInstructionServer(s grpc.ServiceRegistrar, srv InstructionServer) {
	s.RegisterService(&Instruction_ServiceDesc, srv)
}

func _Instruction_Command_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstructionServer).Command(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Instruction/Command",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstructionServer).Command(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Instruction_Script_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstructionServer).Script(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Instruction/Script",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstructionServer).Script(ctx, req.(*ScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Instruction_ServiceDesc is the grpc.ServiceDesc for Instruction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Instruction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Instruction",
	HandlerType: (*InstructionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Command",
			Handler:    _Instruction_Command_Handler,
		},
		{
			MethodName: "Script",
			Handler:    _Instruction_Script_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/agent_api.proto",
}
