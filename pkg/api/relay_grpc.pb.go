// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - rag√π               v0.1.0
// source: pkg/api/relay.proto

package api

import (
	context "context"
	totem "github.com/kralicky/totem"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RelayClient is the client API for Relay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelayClient interface {
	PostletStream(ctx context.Context, opts ...grpc.CallOption) (Relay_PostletStreamClient, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (Relay_ClientStreamClient, error)
}

type relayClient struct {
	cc grpc.ClientConnInterface
}

func NewRelayClient(cc grpc.ClientConnInterface) RelayClient {
	return &relayClient{cc}
}

func (c *relayClient) PostletStream(ctx context.Context, opts ...grpc.CallOption) (Relay_PostletStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Relay_ServiceDesc.Streams[0], "/api.Relay/PostletStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &relayPostletStreamClient{stream}
	return x, nil
}

type Relay_PostletStreamClient interface {
	Send(*totem.RPC) error
	Recv() (*totem.RPC, error)
	grpc.ClientStream
}

type relayPostletStreamClient struct {
	grpc.ClientStream
}

func (x *relayPostletStreamClient) Send(m *totem.RPC) error {
	return x.ClientStream.SendMsg(m)
}

func (x *relayPostletStreamClient) Recv() (*totem.RPC, error) {
	m := new(totem.RPC)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *relayClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (Relay_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Relay_ServiceDesc.Streams[1], "/api.Relay/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &relayClientStreamClient{stream}
	return x, nil
}

type Relay_ClientStreamClient interface {
	Send(*totem.RPC) error
	Recv() (*totem.RPC, error)
	grpc.ClientStream
}

type relayClientStreamClient struct {
	grpc.ClientStream
}

func (x *relayClientStreamClient) Send(m *totem.RPC) error {
	return x.ClientStream.SendMsg(m)
}

func (x *relayClientStreamClient) Recv() (*totem.RPC, error) {
	m := new(totem.RPC)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RelayServer is the server API for Relay service.
// All implementations must embed UnimplementedRelayServer
// for forward compatibility
type RelayServer interface {
	PostletStream(Relay_PostletStreamServer) error
	ClientStream(Relay_ClientStreamServer) error
	mustEmbedUnimplementedRelayServer()
}

// UnimplementedRelayServer must be embedded to have forward compatible implementations.
type UnimplementedRelayServer struct {
}

func (UnimplementedRelayServer) PostletStream(Relay_PostletStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PostletStream not implemented")
}
func (UnimplementedRelayServer) ClientStream(Relay_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedRelayServer) mustEmbedUnimplementedRelayServer() {}

// UnsafeRelayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelayServer will
// result in compilation errors.
type UnsafeRelayServer interface {
	mustEmbedUnimplementedRelayServer()
}

func RegisterRelayServer(s grpc.ServiceRegistrar, srv RelayServer) {
	s.RegisterService(&Relay_ServiceDesc, srv)
}

func _Relay_PostletStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RelayServer).PostletStream(&relayPostletStreamServer{stream})
}

type Relay_PostletStreamServer interface {
	Send(*totem.RPC) error
	Recv() (*totem.RPC, error)
	grpc.ServerStream
}

type relayPostletStreamServer struct {
	grpc.ServerStream
}

func (x *relayPostletStreamServer) Send(m *totem.RPC) error {
	return x.ServerStream.SendMsg(m)
}

func (x *relayPostletStreamServer) Recv() (*totem.RPC, error) {
	m := new(totem.RPC)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Relay_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RelayServer).ClientStream(&relayClientStreamServer{stream})
}

type Relay_ClientStreamServer interface {
	Send(*totem.RPC) error
	Recv() (*totem.RPC, error)
	grpc.ServerStream
}

type relayClientStreamServer struct {
	grpc.ServerStream
}

func (x *relayClientStreamServer) Send(m *totem.RPC) error {
	return x.ServerStream.SendMsg(m)
}

func (x *relayClientStreamServer) Recv() (*totem.RPC, error) {
	m := new(totem.RPC)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Relay_ServiceDesc is the grpc.ServiceDesc for Relay service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Relay_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Relay",
	HandlerType: (*RelayServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PostletStream",
			Handler:       _Relay_PostletStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ClientStream",
			Handler:       _Relay_ClientStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/api/relay.proto",
}
