// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - rag√π               v0.1.0
// source: pkg/api/relay.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RelayClient is the client API for Relay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelayClient interface {
	Announce(ctx context.Context, in *Announcement, opts ...grpc.CallOption) (*Response, error)
	StreamInstructions(ctx context.Context, opts ...grpc.CallOption) (Relay_StreamInstructionsClient, error)
	ClientConnect(ctx context.Context, opts ...grpc.CallOption) (Relay_ClientConnectClient, error)
	Notify(ctx context.Context, in *NotifyMatch, opts ...grpc.CallOption) (Relay_NotifyClient, error)
	SendInstruction(ctx context.Context, in *Instruction, opts ...grpc.CallOption) (*InstructionResponse, error)
}

type relayClient struct {
	cc grpc.ClientConnInterface
}

func NewRelayClient(cc grpc.ClientConnInterface) RelayClient {
	return &relayClient{cc}
}

func (c *relayClient) Announce(ctx context.Context, in *Announcement, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Relay/Announce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayClient) StreamInstructions(ctx context.Context, opts ...grpc.CallOption) (Relay_StreamInstructionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Relay_ServiceDesc.Streams[0], "/api.Relay/StreamInstructions", opts...)
	if err != nil {
		return nil, err
	}
	x := &relayStreamInstructionsClient{stream}
	return x, nil
}

type Relay_StreamInstructionsClient interface {
	Send(*InstructionResponse) error
	Recv() (*Instruction, error)
	grpc.ClientStream
}

type relayStreamInstructionsClient struct {
	grpc.ClientStream
}

func (x *relayStreamInstructionsClient) Send(m *InstructionResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *relayStreamInstructionsClient) Recv() (*Instruction, error) {
	m := new(Instruction)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *relayClient) ClientConnect(ctx context.Context, opts ...grpc.CallOption) (Relay_ClientConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &Relay_ServiceDesc.Streams[1], "/api.Relay/ClientConnect", opts...)
	if err != nil {
		return nil, err
	}
	x := &relayClientConnectClient{stream}
	return x, nil
}

type Relay_ClientConnectClient interface {
	Send(*ClientConnectRequest) error
	Recv() (*ClientConnectResponse, error)
	grpc.ClientStream
}

type relayClientConnectClient struct {
	grpc.ClientStream
}

func (x *relayClientConnectClient) Send(m *ClientConnectRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *relayClientConnectClient) Recv() (*ClientConnectResponse, error) {
	m := new(ClientConnectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *relayClient) Notify(ctx context.Context, in *NotifyMatch, opts ...grpc.CallOption) (Relay_NotifyClient, error) {
	stream, err := c.cc.NewStream(ctx, &Relay_ServiceDesc.Streams[2], "/api.Relay/Notify", opts...)
	if err != nil {
		return nil, err
	}
	x := &relayNotifyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Relay_NotifyClient interface {
	Recv() (*NotifyResponse, error)
	grpc.ClientStream
}

type relayNotifyClient struct {
	grpc.ClientStream
}

func (x *relayNotifyClient) Recv() (*NotifyResponse, error) {
	m := new(NotifyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *relayClient) SendInstruction(ctx context.Context, in *Instruction, opts ...grpc.CallOption) (*InstructionResponse, error) {
	out := new(InstructionResponse)
	err := c.cc.Invoke(ctx, "/api.Relay/SendInstruction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelayServer is the server API for Relay service.
// All implementations must embed UnimplementedRelayServer
// for forward compatibility
type RelayServer interface {
	Announce(context.Context, *Announcement) (*Response, error)
	StreamInstructions(Relay_StreamInstructionsServer) error
	ClientConnect(Relay_ClientConnectServer) error
	Notify(*NotifyMatch, Relay_NotifyServer) error
	SendInstruction(context.Context, *Instruction) (*InstructionResponse, error)
	mustEmbedUnimplementedRelayServer()
}

// UnimplementedRelayServer must be embedded to have forward compatible implementations.
type UnimplementedRelayServer struct {
}

func (UnimplementedRelayServer) Announce(context.Context, *Announcement) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Announce not implemented")
}
func (UnimplementedRelayServer) StreamInstructions(Relay_StreamInstructionsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamInstructions not implemented")
}
func (UnimplementedRelayServer) ClientConnect(Relay_ClientConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientConnect not implemented")
}
func (UnimplementedRelayServer) Notify(*NotifyMatch, Relay_NotifyServer) error {
	return status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedRelayServer) SendInstruction(context.Context, *Instruction) (*InstructionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInstruction not implemented")
}
func (UnimplementedRelayServer) mustEmbedUnimplementedRelayServer() {}

// UnsafeRelayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelayServer will
// result in compilation errors.
type UnsafeRelayServer interface {
	mustEmbedUnimplementedRelayServer()
}

func RegisterRelayServer(s grpc.ServiceRegistrar, srv RelayServer) {
	s.RegisterService(&Relay_ServiceDesc, srv)
}

func _Relay_Announce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Announcement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayServer).Announce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Relay/Announce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayServer).Announce(ctx, req.(*Announcement))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relay_StreamInstructions_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RelayServer).StreamInstructions(&relayStreamInstructionsServer{stream})
}

type Relay_StreamInstructionsServer interface {
	Send(*Instruction) error
	Recv() (*InstructionResponse, error)
	grpc.ServerStream
}

type relayStreamInstructionsServer struct {
	grpc.ServerStream
}

func (x *relayStreamInstructionsServer) Send(m *Instruction) error {
	return x.ServerStream.SendMsg(m)
}

func (x *relayStreamInstructionsServer) Recv() (*InstructionResponse, error) {
	m := new(InstructionResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Relay_ClientConnect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RelayServer).ClientConnect(&relayClientConnectServer{stream})
}

type Relay_ClientConnectServer interface {
	Send(*ClientConnectResponse) error
	Recv() (*ClientConnectRequest, error)
	grpc.ServerStream
}

type relayClientConnectServer struct {
	grpc.ServerStream
}

func (x *relayClientConnectServer) Send(m *ClientConnectResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *relayClientConnectServer) Recv() (*ClientConnectRequest, error) {
	m := new(ClientConnectRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Relay_Notify_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NotifyMatch)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RelayServer).Notify(m, &relayNotifyServer{stream})
}

type Relay_NotifyServer interface {
	Send(*NotifyResponse) error
	grpc.ServerStream
}

type relayNotifyServer struct {
	grpc.ServerStream
}

func (x *relayNotifyServer) Send(m *NotifyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Relay_SendInstruction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Instruction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayServer).SendInstruction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Relay/SendInstruction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayServer).SendInstruction(ctx, req.(*Instruction))
	}
	return interceptor(ctx, in, info, handler)
}

// Relay_ServiceDesc is the grpc.ServiceDesc for Relay service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Relay_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Relay",
	HandlerType: (*RelayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Announce",
			Handler:    _Relay_Announce_Handler,
		},
		{
			MethodName: "SendInstruction",
			Handler:    _Relay_SendInstruction_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamInstructions",
			Handler:       _Relay_StreamInstructions_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ClientConnect",
			Handler:       _Relay_ClientConnect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Notify",
			Handler:       _Relay_Notify_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/api/relay.proto",
}
