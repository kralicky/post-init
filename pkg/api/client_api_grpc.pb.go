// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - rag√π               v0.1.0
// source: pkg/api/client_api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClientAPIClient is the client API for ClientAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientAPIClient interface {
	Connect(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (*ConnectionResponse, error)
	Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RunCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error)
	RunScript(ctx context.Context, in *ScriptRequest, opts ...grpc.CallOption) (*ScriptResponse, error)
}

type clientAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewClientAPIClient(cc grpc.ClientConnInterface) ClientAPIClient {
	return &clientAPIClient{cc}
}

func (c *clientAPIClient) Connect(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (*ConnectionResponse, error) {
	out := new(ConnectionResponse)
	err := c.cc.Invoke(ctx, "/api.ClientAPI/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientAPIClient) Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.ClientAPI/Watch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientAPIClient) RunCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, "/api.ClientAPI/RunCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientAPIClient) RunScript(ctx context.Context, in *ScriptRequest, opts ...grpc.CallOption) (*ScriptResponse, error) {
	out := new(ScriptResponse)
	err := c.cc.Invoke(ctx, "/api.ClientAPI/RunScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientAPIServer is the server API for ClientAPI service.
// All implementations must embed UnimplementedClientAPIServer
// for forward compatibility
type ClientAPIServer interface {
	Connect(context.Context, *ConnectionRequest) (*ConnectionResponse, error)
	Watch(context.Context, *WatchRequest) (*emptypb.Empty, error)
	RunCommand(context.Context, *CommandRequest) (*CommandResponse, error)
	RunScript(context.Context, *ScriptRequest) (*ScriptResponse, error)
	mustEmbedUnimplementedClientAPIServer()
}

// UnimplementedClientAPIServer must be embedded to have forward compatible implementations.
type UnimplementedClientAPIServer struct {
}

func (UnimplementedClientAPIServer) Connect(context.Context, *ConnectionRequest) (*ConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedClientAPIServer) Watch(context.Context, *WatchRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedClientAPIServer) RunCommand(context.Context, *CommandRequest) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCommand not implemented")
}
func (UnimplementedClientAPIServer) RunScript(context.Context, *ScriptRequest) (*ScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunScript not implemented")
}
func (UnimplementedClientAPIServer) mustEmbedUnimplementedClientAPIServer() {}

// UnsafeClientAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientAPIServer will
// result in compilation errors.
type UnsafeClientAPIServer interface {
	mustEmbedUnimplementedClientAPIServer()
}

func RegisterClientAPIServer(s grpc.ServiceRegistrar, srv ClientAPIServer) {
	s.RegisterService(&ClientAPI_ServiceDesc, srv)
}

func _ClientAPI_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientAPIServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ClientAPI/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientAPIServer).Connect(ctx, req.(*ConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientAPI_Watch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientAPIServer).Watch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ClientAPI/Watch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientAPIServer).Watch(ctx, req.(*WatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientAPI_RunCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientAPIServer).RunCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ClientAPI/RunCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientAPIServer).RunCommand(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientAPI_RunScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientAPIServer).RunScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ClientAPI/RunScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientAPIServer).RunScript(ctx, req.(*ScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientAPI_ServiceDesc is the grpc.ServiceDesc for ClientAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ClientAPI",
	HandlerType: (*ClientAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _ClientAPI_Connect_Handler,
		},
		{
			MethodName: "Watch",
			Handler:    _ClientAPI_Watch_Handler,
		},
		{
			MethodName: "RunCommand",
			Handler:    _ClientAPI_RunCommand_Handler,
		},
		{
			MethodName: "RunScript",
			Handler:    _ClientAPI_RunScript_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/client_api.proto",
}

// KeyExchangeClient is the client API for KeyExchange service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyExchangeClient interface {
	ExchangeKeys(ctx context.Context, in *KexRequest, opts ...grpc.CallOption) (*KexResponse, error)
	Sign(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*SignResponse, error)
}

type keyExchangeClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyExchangeClient(cc grpc.ClientConnInterface) KeyExchangeClient {
	return &keyExchangeClient{cc}
}

func (c *keyExchangeClient) ExchangeKeys(ctx context.Context, in *KexRequest, opts ...grpc.CallOption) (*KexResponse, error) {
	out := new(KexResponse)
	err := c.cc.Invoke(ctx, "/api.KeyExchange/ExchangeKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyExchangeClient) Sign(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*SignResponse, error) {
	out := new(SignResponse)
	err := c.cc.Invoke(ctx, "/api.KeyExchange/Sign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyExchangeServer is the server API for KeyExchange service.
// All implementations must embed UnimplementedKeyExchangeServer
// for forward compatibility
type KeyExchangeServer interface {
	ExchangeKeys(context.Context, *KexRequest) (*KexResponse, error)
	Sign(context.Context, *SignRequest) (*SignResponse, error)
	mustEmbedUnimplementedKeyExchangeServer()
}

// UnimplementedKeyExchangeServer must be embedded to have forward compatible implementations.
type UnimplementedKeyExchangeServer struct {
}

func (UnimplementedKeyExchangeServer) ExchangeKeys(context.Context, *KexRequest) (*KexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeKeys not implemented")
}
func (UnimplementedKeyExchangeServer) Sign(context.Context, *SignRequest) (*SignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sign not implemented")
}
func (UnimplementedKeyExchangeServer) mustEmbedUnimplementedKeyExchangeServer() {}

// UnsafeKeyExchangeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyExchangeServer will
// result in compilation errors.
type UnsafeKeyExchangeServer interface {
	mustEmbedUnimplementedKeyExchangeServer()
}

func RegisterKeyExchangeServer(s grpc.ServiceRegistrar, srv KeyExchangeServer) {
	s.RegisterService(&KeyExchange_ServiceDesc, srv)
}

func _KeyExchange_ExchangeKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyExchangeServer).ExchangeKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.KeyExchange/ExchangeKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyExchangeServer).ExchangeKeys(ctx, req.(*KexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyExchange_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyExchangeServer).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.KeyExchange/Sign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyExchangeServer).Sign(ctx, req.(*SignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyExchange_ServiceDesc is the grpc.ServiceDesc for KeyExchange service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyExchange_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.KeyExchange",
	HandlerType: (*KeyExchangeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExchangeKeys",
			Handler:    _KeyExchange_ExchangeKeys_Handler,
		},
		{
			MethodName: "Sign",
			Handler:    _KeyExchange_Sign_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/client_api.proto",
}

// WatchClient is the client API for Watch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WatchClient interface {
	Notify(ctx context.Context, in *Announcement, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type watchClient struct {
	cc grpc.ClientConnInterface
}

func NewWatchClient(cc grpc.ClientConnInterface) WatchClient {
	return &watchClient{cc}
}

func (c *watchClient) Notify(ctx context.Context, in *Announcement, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.Watch/Notify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WatchServer is the server API for Watch service.
// All implementations must embed UnimplementedWatchServer
// for forward compatibility
type WatchServer interface {
	Notify(context.Context, *Announcement) (*emptypb.Empty, error)
	mustEmbedUnimplementedWatchServer()
}

// UnimplementedWatchServer must be embedded to have forward compatible implementations.
type UnimplementedWatchServer struct {
}

func (UnimplementedWatchServer) Notify(context.Context, *Announcement) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedWatchServer) mustEmbedUnimplementedWatchServer() {}

// UnsafeWatchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WatchServer will
// result in compilation errors.
type UnsafeWatchServer interface {
	mustEmbedUnimplementedWatchServer()
}

func RegisterWatchServer(s grpc.ServiceRegistrar, srv WatchServer) {
	s.RegisterService(&Watch_ServiceDesc, srv)
}

func _Watch_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Announcement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Watch/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServer).Notify(ctx, req.(*Announcement))
	}
	return interceptor(ctx, in, info, handler)
}

// Watch_ServiceDesc is the grpc.ServiceDesc for Watch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Watch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Watch",
	HandlerType: (*WatchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Notify",
			Handler:    _Watch_Notify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/client_api.proto",
}
